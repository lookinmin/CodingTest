# deque()

스택처럼, 큐처럼
from collections import deque 

q = deque()		# 양방향 삽입 삭제가 일어나는 자료구조

q.appendleft()
q.append()
q.pop()
q.popleft()
q.extend()
q.extendleft()		# 왼쪽으로 확장
q.reverse()			# 반전
q.rotate(x)			# x만큼 시계방향 회전 ->

# heapq()

min heap 자료구조
-> 부모 노드의 키 값 <= 자식 노드의 키 값
원소는 항상 정렬되어 추가 & 삭제, 가장 작은 값이 언제나 인덱스 0

heap = []
# heappush(a, x)			# 최소힙 원소 추가
heapq.heappush(heap, 4)		# heap이라는 리스트에 4 추가	현재 부모는 4	
heapq.heappush(heap, 1)		# [1, 4]				현재 부모는 1
heapq.heappush(heap, 7)		# [1, 7, 4]				부모 1 자식 7, 4
heapq.heappush(heap, 3)		# [1, 3, 7, 4]			부모 1 자식 3 7 자식 4
print(heap)				# 1, 3, 7, 4

# heappop(a)			# 최소힙 원소 삭제
# 해당 리스트에서 가장 작은 원소를 삭제, 이때 삭제하는 값 리턴
heapq.heappop(heap)

# heapify(a)			# 기존 리스트 힙으로 변환
heapq.heapfiy(heap)		# O(n)

# 최대 힙 활용
-> 힙에 원소를 추가할 때, (-i, i)의 tuple 형태로 넣어주면 첫번쨰 원소 기준 힙 구성 -> max heap 구성
import heapq

nums = [4, 1, 7, 3, 8, 5]
heap = []

for num in nums:
  heapq.heappush(heap, (-num, num))

while heap:
  print(heapq.heappop(heap)[1])
# [1] 인덱싱을 통해 접근

def heapsort(arr)			-> 힙을 사용해 오름차순 정렬하기
  h = []
  res = []
  for i in arr:
	heapq.heappush(h, i)

  for i in range(len(h)):
	res.append(heapq.heappop(h))
  
  return res
# 이를 통하면 a.sort() 는 O(n^2) 인데, 힙 정렬은 O(n*logn)


